name: Deploy Documentation to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # If using the 'assets' or 'wiki' folder:
          # path: './'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          bundle install
          npm install

      - name: Build with Jekyll
        run: bundle exec jekyll build
        env:
          JEKYLL_ENV: ${{ secrets.JEKYLL_ENV || 'production' }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Test job
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          bundle install
          npm install

      - name: Test Jekyll build
        run: bundle exec jekyll build --safe
        env:
          JEKYLL_ENV: test

      - name: Validate HTML
        uses: actions/github-script@v7
        with:
          script: |
            const actionsCore = require('@actions/core');
            const fs = require('fs');
            const path = require('path');
            
            // Check if _site directory exists
            if (!fs.existsSync('_site')) {
              actionsCore.setFailed('Build directory _site does not exist');
              return;
            }
            
            // Check for index.html
            if (!fs.existsSync('_site/index.html')) {
              actionsCore.setFailed('index.html not found in build output');
              return;
            }
            
            console.log('✅ Build validation passed');

      - name: Check for broken links
        run: |
          # Install linkchecker if available
          if command -v linkchecker &> /dev/null; then
            linkchecker --check-extern --no-robots --ignore-url="^#" _site/index.html
          else
            echo "Linkchecker not available, skipping link validation"
          fi

  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          bundle install
          npm install

      - name: Install bundle-audit gem
        run: gem install bundle-audit

      - name: Run security audit
        run: |
          # Ruby security audit
          bundle audit check --update
          
          # Node.js security audit
          npm audit --audit-level moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: ${{ github.sha }}
          extra_args: --only-verified --fail

  # Documentation quality check
  quality:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check markdown files
        run: |
          # Check for broken internal links
          find . -name "*.md" -exec grep -l "\[.*\](" {} \; | while read file; do
            echo "Checking links in $file"
            grep -o "\[.*\]([^)]*)" "$file" | while read link; do
              url=$(echo "$link" | sed 's/.*(\([^)]*\)).*/\1/')
              if [[ "$url" == http* ]]; then
                echo "External link: $url"
              else
                if [[ ! -f "$url" ]] && [[ ! -d "$url" ]]; then
                  echo "⚠️  Broken internal link in $file: $url"
                fi
              fi
            done
          done

      - name: Check file structure
        run: |
          # Ensure required directories exist
          required_dirs=("architecture" "api" "development" "knowledge" "operations" "business")
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "⚠️  Required directory missing: $dir"
            fi
          done
          
          # Check for README files in main directories
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ] && [ ! -f "$dir/README.md" ]; then
              echo "⚠️  README.md missing in $dir/"
            fi
          done

      - name: Validate front matter
        uses: actions/github-script@v7
        with:
          script: |
            const actionsCore = require('@actions/core');
            const fs = require('fs');
            const path = require('path');
            
            function validateFrontMatter(filePath) {
              const content = fs.readFileSync(filePath, 'utf8');
              const lines = content.split('\n');
              
              if (lines[0] !== '---') {
                console.log(`⚠️  ${filePath}: Missing front matter start (---)`);
                return false;
              }
              
              let endIndex = -1;
              for (let i = 1; i < lines.length; i++) {
                if (lines[i] === '---') {
                  endIndex = i;
                  break;
                }
              }
              
              if (endIndex === -1) {
                console.log(`⚠️  ${filePath}: Missing front matter end (---)`);
                return false;
              }
              
              return true;
            }
            
            // Check markdown files for proper front matter
            const markdownFiles = fs.readdirSync('.', { recursive: true })
              .filter(file => file.endsWith('.md') && !file.includes('node_modules'))
              .filter(file => !file.includes('.github'));
            
            let validFiles = 0;
            let totalFiles = markdownFiles.length;
            
            markdownFiles.forEach(file => {
              if (validateFrontMatter(file)) {
                validFiles++;
              }
            });
            
            console.log(`✅ Front matter validation: ${validFiles}/${totalFiles} files valid`);
            
            if (validFiles < totalFiles) {
              actionsCore.setFailed('Some markdown files have invalid front matter');
            }
